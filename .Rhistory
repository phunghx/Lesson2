exp(coef(fit)) #give answer
exp(coef(fit)[1] + coef(fit)[1]^2)
fit <- glm(formula = use ~ wind , data= shuttle,family="binomial")
exp(coef(fit)[1] + coef(fit)[1]^2)
exp(coef(fit)) #give answer
exp(coef(fit)[1] + coef(fit)[1])
head(shuttle$wind)
head(shuttle$use)
coef(fit)
exp(coef(fit)) #give answer
fit <- glm(formula = use ~ wind + magn, data= shuttle,family="binomial")
exp(coef(fit)) #give answer
fit <- glm(formula = use ~ wind + magn, data= shuttle,family="binomial")
1 / exp(coef(fit)) #give answer
exp(coef(fit)) #give answer
head(as.numeric(shuttle$use))
fitinvert <- glm(formula = (1 - as.numeric(use)) ~ wind , data= shuttle,family="binomial")
shuttle$ivertuse <- (1 - as.numeric(shuttle$use)
)
fitinvert <- glm(formula = ivertuse ~ wind , data= shuttle,family="binomial")
head(shuttle$ivertuse)
fitinvert <- glm(formula = ivertuse ~ as.numeric(wind) , data= shuttle,family="binomial")
View(shuttle)
shuttle$ivertuse == -1
shuttle[shuttle$ivertuse == -1,ivertuse] = 1
shuttle[shuttle$ivertuse == -1,7] = 1
View(shuttle)
shuttle[shuttle$ivertuse == -1,8] = 1
View(shuttle)
fitinvert <- glm(formula = ivertuse ~ wind , data= shuttle,family="binomial")
coef(fitinvert)
fit <- glm(formula = use ~ wind , data= shuttle,family="binomial")
coef(fit)
fit <- glm(formula = (1 - ivertuse) ~ wind , data= shuttle,family="binomial")
coef(fit)
fit <- glm(formula = (1 - ivertuse) ~ wind , data= shuttle,family="binomial")
coef(fit)
fitinvert <- glm(formula = ivertuse ~ wind , data= shuttle,family="binomial")
coef(fitinvert)
exp(coef(fit)) #give answer
exp(coef(fit)[1] + coef(fit)[1]^2)
exp(coef(fit)[1] + coef(fit)[1])
fit <- glm(formula = (1 - ivertuse) ~ as.numeric(wind) , data= shuttle,family="binomial")
coef(fit)
exp(coef(fit)) #give answer
fit <- glm(formula = (1 - ivertuse) ~ (wind) , data= shuttle,family="binomial")
summary(fit)
exp(coef(fit)) #give answer
1/1.032323
fit <- glm(formula = (1 - ivertuse) ~ wind + magn, data= shuttle,family="binomial")
exp(coef(fit)) #give answer
1/1.0325265
data(InsectSprays)
head(InsectSprays$spray)
fit2 <- glm(count ~ spray, data = InsectSprays, family="poisson")
summary(fit2)
fit2 <- glm(count ~ spray - 1, data = InsectSprays, family="poisson")
summary(fit2)
2.67415 / 2.73003
2.73003 / 2.67415
fit2 <- glm(count ~ spray , data = InsectSprays, family="poisson")
summary(fit2)
exp(0.05588)
1/exp(0.05588)
fit2 <- glm(count ~ spray -1, data = InsectSprays, family="poisson")
summary(fit2)
2.67415/2.73003
exp(2.67415/2.73003)
exp(2.73003/2.67415)
1/exp(2.73003/2.67415)
coef(fit2)
exp(2.7300291)
fit2 <- glm(count ~ spray, data = InsectSprays, family="poisson")
coef(fit2)
exp(0.05588046)
1 / exp(0.05588046)
treatment     <- factor(rep(c(1, 2), c(43, 41)),
levels = c(0, 1),
labels = c("placebo", "treated"))
View(treatment)
treatment
treatment     <- factor(rep(c(1, 2), c(43, 41)),
levels = c(1, 2),
labels = c("placebo", "treated"))
treatment
View(treatment)
rep(c(1, 2), c(43, 41))
numberofdrugs <- rpois(84, 10) + 1
healthvalue   <- rpois(84, 5)
time <- 1:84
y             <- data.frame(healthvalue, treatment, time)
View(y)
fit1 <- glm(healthvalue ~ treatment + offset(time),data = y, family = poisson)
fit1 <- glm(healthvalue ~ treatment + offset(log(time)),data = y, family = poisson)
fit2 <- glm(healthvalue ~ treatment + offset(log(time)+ log(10)),data = y, family = poisson)
coef(fit1)
coef(fit2)
log(10)
-3.866561 + log(10)
splineTerms<-sapply(knots,function(knot)(x>knot)*(x-knot))
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots<-c(0)
splineTerms<-sapply(knots,function(knot)(x>knot)*(x-knot))
xMat<-cbind(1,x,splineTerms)
(lm(y~xMat-1)
)
fit <- lm(y~xMat)
coef(fit)
View(xMat)
x
plot(x,y,frame=FALSE,pch=21,bg="lightblue",cex=2)
lines(x,yhat,col="red",lwd=2)
yhat<-predict(lm(y~xMat-1))
lines(x,yhat,col="red",lwd=2)
fit <- lm(y~xMat-1)
coef(fit)
plot(fit)
2.0372258 + -0.1825806\
2.0372258 + -0.1825806
2.0372258 + -1.0241584
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
install.packages("h2o", repos=(c("http://s3.amazonaws.com/h2o-release/h2o/master/1449/R", getOption("repos"))))
library(h20)
library(h2o)
localH2O = h2o.init()
localH2O = h2o.init()
demo(h2o.glm)
?lapply
?sapply
irisPath = system.file("extdata", "iris.csv", package="h2o")
iris.hex = h2o.importFile(localH2O, path = irisPath, key = "iris.hex")
summary(iris.hex)
sewd("d:\\DataAnalysis_Company\\Project3_Higgs")
setwd("d:\\DataAnalysis_Company\\Project3_Higgs")
higg = system.file("", "training.csv", package="h2o")
higg
higg = system.file("d:\\DataAnalysis_Company\\Project3_Higgs", "training.csv", package="h2o")
higg
?system.file
?h2o.importFile
higg = h2o.importFile(localH2O, path = "traning.csv", key = "higg")
higg = h2o.importFile(localH2O, path = "d:\\DataAnalysis_Company\\Project3_Higgs\\traning.csv", key = "higg")
higg = h2o.importFile(localH2O, path = "d:\\DataAnalysis_Company\\Project3_Higgs\\training.csv", key = "higg")
head(higg)
summary(higg)
?h2o.init
?h2o.deeplearning
?h2o.randomForest
names(higg)
model <- h2o.randomForest(y=33,x=2:31,data=higg)
summary(model)
model
?h2o.predict
higgTest = h2o.importFile(localH2O, path = "d:\\DataAnalysis_Company\\Project3_Higgs\\test.csv", key = "higgTest")
h2o.predict(object = model, newdata = head(higgTest))
h2o.predict(object = model, newdata = higgTest)
result <- h2o.predict(object = model, newdata = higgTest)
length(result)
dim(result)
result[10,1]
save(result,"result.csv")
?save
save(result,file = "result.csv")
?h2o.downloadCSV
h2o.downloadCSV(data=result,filename = "d:\\results.csv")
?h2o.shutdown
?h2o.anomaly
names(prostate.hex)
summary(prostate.hex$AGE)
library(ggplot2)
qplot(x=AGE,data=prostate.hex)
?h2o.addFunction
h2o.addFunction(localH2O,ggplot2::qplot,"plot2")
?h2o.deeplearning
model2 <-  h2o.deeplearning(y=33,x=2:31,data=higg,activation = "Tanh",hidden = c(30,40),epochs = 5,nfolds = 3, fast_mode = T)
model2
model
hist(higg$DER_mass_MMC)
hist(as.numeric(higg$DER_mass_MMC))
?h2o.randomForest
model <- h2o.randomForest(y=33,x=2:31,data=higg,ntree = 100, depth = 200,nfolds = 5)
model
model2
result <- h2o.predict(object = model,newdata = higgTest)
h2o.downloadCSV(result, "D:\results.csv")
h2o.downloadCSV(result, "D:/results.csv")
h2o.shutdown(localH2O)
library(h2o)
localH20 <- h2o.init()
?h2o.domForest
higg.test <- h2o.importFile(localH20, path ="d:\\DataAnalysis_Company\\Project3_Higgs\\training.csv" , key = "higg.test")
higg.test <- higg.test[,-1]
higg.test <- higg.test[,-31]
mean(higg.test[,1])
mean(higg.test[,1],na.rm = T)
names(higg.test)
meanVariable <- c()
for (i=1:30)
{
}
for (i in 1:30)
{
}
meanVariable <- c()
for (i in 1:30)
{
meanVariable <- c(meanVariable, mean(higg.test[,i], na.rm = T))
}
meanVariable
n <- dim(higg.test)[1]
n <- dim(higg.test)[1]
for(i in 1:n){
for (j in 1:30){
if(is.na(higg.test[i,j]))
higg.test[i,j] <- meanVariable[j]
}
}
is.na(higg.test[1,1])
is.na(higg.test[1,1])[0]
is.na(higg.test[1,1])[1]
is.na(higg.test[1,1])[1][1]
is.na(higg.test[1,1])[2]
is.na(higg.test[1,1])
is.na(higg.test[1,1])==0
if(is.na(higg.test[1,1])==0)
print("test")
showClass("H2OParsedData")
h2o.clearLogs()
?h2o.createFrame
?h2o.gapStatistic
h2o.gapStatistic(data = higg.test)
setwd("d:\\DataAnalysis_Company\\Project3_Higgs")
higg.test <- read.csv("training.csv")
meanVariable <- c()
for (i in 1:30)
{
meanVariable <- c(meanVariable, mean(higg.test[,i], na.rm = T))
}
higg.test <- higg.test[,-1]
higg.test <- higg.test[,-31]
meanVariable <- c()
for (i in 1:30)
{
meanVariable <- c(meanVariable, mean(higg.test[,i], na.rm = T))
}
n <- dim(higg.test)[1]
for(i in 1:n){
for (j in 1:30){
if(is.na(higg.test[i,j]))
higg.test[i,j] <- meanVariable[j]
}
}
library(caret)
higg.test[is.na(higg.test[,1])]
meanVariable <- c()
for (i in 1:30)
{
meanVariable <- c(meanVariable, mean(higg.test[,i], na.rm = T))
}
for(i in 1:30){
higg.test[is.na(higg.test[,i]),i] <- meanVariable[i]
}
head(higg.test)
?h2o.createFrame
write.csv(higg.test,file="training_nan.csv")
higg.test <- h2o.importFile(localH20, path ="d:\\DataAnalysis_Company\\Project3_Higgs\\training_nan.csv" , key = "higg.test")
names(higg.test)
higg.test <- h2o.importFile(localH20, path ="d:\\DataAnalysis_Company\\Project3_Higgs\\training_nan.csv" , key = "higg.test")
names(higg.test)
summary(higg.test)
higg.test <- higg.test[,-1]
names(higg.test)
model <- h2o.randomForest(y=31,x=1:30,data= higg.test)
model
model2 <-h2o.glm(y=31,x=1:30,data= higg.test,family = "poisson")
model <- h2o.randomForest(y=31,x=1:30,data= higg.test,depth = 100)
model
nams(higg.test)
names(higg.test)
model2 <- h2o.randomForest(y=31,x=1:13,data= higg.test,depth = 100,ntree = 100)
model2
model3 <- h2o.randomForest(y=31,x=14:30,data= higg.test,depth = 100,ntree = 100)
model3
higg <- read.csv("training.csv")
head(higg)
names(higg)
higg <- higg[,c(-1,-32)]
names(higg)
for(i in 1:30){
higg <- higg[!is.na(higg[,i]),]
}
head(higg)
write.csv(higg,file = "training_withoutNA.csv")
higg.test <- h2o.importFile(localH20, path ="d:\\DataAnalysis_Company\\Project3_Higgs\\training_withoutNA.csv" , key = "higg.test.na")
summary(higg.test)
model4 <- h2o.randomForest(y=31,x=1:30,data= higg.test,depth = 100)
names(higg.test)
higg.test[,-1]
higg.test <- higg.test[,-1]
names(higg.test)
model4 <- h2o.randomForest(y=31,x=1:30,data= higg.test,depth = 100)
model4
model5 <- h2o.naiveBayes(y=31,x=1:30,data= higg.test)
model5
modelPCM <- h2o.prcomp(data=higg.test,standardize = TRUE)
modelPCM
model6 <- h2o.deeplearning(y=31,x=1:30,data= higg.test,activation = "Tanh",hidden=c(30,40),epochs = 5)
model6
model6 <- h2o.deeplearning(y=31,x=1:30,data= higg.test,activation = "TanhWithDropout",hidden=c(30,40),epochs = 5)
model6
model6 <- h2o.deeplearning(y=31,x=1:30,data= higg.test,activation = "TanhWithDropout",hidden=c(30,40),epochs = 5,diagnostics = T)
model6
model6 <- h2o.deeplearning(y=31,x=1:30,data= higg.test,activation = "Tanh",hidden=c(30,40),epochs = 5,diagnostics = T,autoencoder = T)
model6
model6 <- h2o.deeplearning(y=31,x=1:30,data= higg.test,activation = "Tanh",hidden=c(30,40),epochs = 5,diagnostics = T,autoencoder = F)
model6
model6 <- h2o.deeplearning(y=31,x=1:30,data= higg.test,activation = "Tanh",hidden=c(30,40),epochs = 5,diagnostics = T,autoencoder = F,momentum_start = 0.5)
model6
model6 <- h2o.deeplearning(y=31,x=1:30,data= higg.test,activation = "Tanh",hidden=c(30,40),epochs = 5,diagnostics = T,autoencoder = F,momentum_start = 0.5,momentum_stable = 0.99)
model6
higg.test <- h2o.importFile(localH20, path ="d:\\DataAnalysis_Company\\Project3_Higgs\\training.csv" , key = "higg.test")
higg.test <- higg.test[,-1]
higg.test <- higg.test[,-31]
head(higg.test)
higg.test <- h2o.importFile(localH20, path ="d:\\DataAnalysis_Company\\Project3_Higgs\\training.csv" , key = "higg.test")
higg.test <- higg.test[,-1]
higg.test <- higg.test[,-31]
head(higg.test)
model <- h2o.randomForest(y=31,x=1:30,data= higg.test,depth = 100,nfolds = 10)
h2o.shutdown(localH20)
h2o.shutdown(localH20)
h2o.shutdown(localH20)
localH20 <- h2o.init()
higg.test <- h2o.importFile(localH20, path ="d:\\DataAnalysis_Company\\Project3_Higgs\\training.csv" , key = "higg.test")
higg.test <- higg.test[,-1]
higg.test <- higg.test[,-31]
model <- h2o.randomForest(y=31,x=1:30,data= higg.test,depth = 100,nfolds = 10)
library(h2o)
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
install.packages("h2o", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-lagrange/6/R", getOption("repos"))))
library(h2o)
localH2O = h2o.init()
?h2o.randomForest
irisPath = system.file("extdata", "iris.csv", package = "h2o")
iris.hex = h2o.importFile(localH2O, path = irisPath, key = "iris.hex")
h2o.randomForest(y = 5, x = c(2,3,4), data = iris.hex, ntree = 50, depth = 100)
h2o.randomForest(y = 4, x = c(2,3), data = iris.hex, ntree = 50, depth = 100)
h2o.randomForest(y = 4, x = c(2,3), data = iris.hex, ntree = 50, depth = 100, classification = FALSE)
h2o.randomForest(y = 5, x = c(2,3), data = iris.hex, ntree = 50, depth = 100, classification = FALSE)
higg.test <- h2o.importFile(localH2O, path ="d:\\DataAnalysis_Company\\Project3_Higgs\\training.csv" , key = "higg.test")
model <- h2o.getModel(localH2O,"higg.test")
?h2o.loadModel
model <- h2o.loadModel(localH2O,path = "d:\\DataAnalysis_Company\\Project3_Higgs\\Higg")
model
result <- h2o.predict(object=model,newdata= higg.test)
head(result)
head(higg.test$Weight)
data.frame(head(result,10),head(higg.test$Weight)
)
data.frame(head(result,10),head(higg.test$Weight,10))
h2o.shutdownt(localH2O)
h2o.shutdown(localH2O)
h2o.init()
h2o.year(4343425)
as.Date(43234)
?h2o.init
h2o.shutdown(localH2O)
localH2O = h2o.init(ip = "localhost", port = c(54321,23456), startH2O = FALSE)
localH2O = h2o.init(ip = "localhost", port = 54321, startH2O = FALSE)
localH2O = h2o.init(ip = "localhost", port = 54320, startH2O = FALSE)
localH2O = h2o.init()
localH2O = h2o.init()
h2o.shutdown(localH2O)
\
library(h2o)
localH20 <- h2o.init()
model <- h2o.loadModel(localH20,"d:\\DataAnalysis_Company\\Project3_Higgs\\Higg2")
model
higg.test <- h2o.importFile(localH20, path ="d:\\DataAnalysis_Company\\Project3_Higgs\\training.csv" , key = "higg.test")
result <- h2o.predict(object = model,newdata=higg.test)
head(result)
data.frame(head(result,10),head(higg.test$Weight,10))
data.frame(head(result,20),head(higg.test$Weight,20))
names(higg.test)
modelsb <- h2o.randomForest(x=32,y=33,data = higg.test)
modelsb
modelsb <- h2o.randomForest(x=32,y=33,data = higg.test,ntree=100,depth=100)
modelsb
?h2o.naiveBayes()
h2o.naiveBayes(x=32,y=33,data=higg.test)
modelsb <- h2o.randomForest(x=32,y=33,data = higg.test,ntree=150,depth=100)
modelsb
h2o.deeplearning(x=32,y=33)
h2o.deeplearning(x=32,y=33,data=higg.test)
h2o.glm(x=32,y=33,data=higg.test,family = "gaussion")
h2o.glm(x=32,y=33,data=higg.test,family = "gaussian")
?h2o.glm
?h2o.gbm
h2o.gbm(x=32,y=33,data=higg.test)
modelbs <- h2o.gbm(x=32,y=33,data=higg.test,nfolds = 10)
modelbs
predict <- h2o.predict(modelbs, newdata = result)
head(predict)
head(higg.test$Label)
h2o.confusionMatrix(predict,higg.test$Label)
h2o.confusionMatrix(predict$predict,higg.test$Label)
modelbs2 <- h2o.randomForest(x=32,y=33,data=higg.test)
modelbs2
result <- h2o.predict(model,higg.test)
head(result)
predict <- h2o.predict(modelbs2,result)
head(predict)
h2o.confusionMatrix(predict$predict, higg.test$Label)
setwd("d:\\DataAnalysis_Company\\Project3_Higgs")
higg <- read.csv("training.csv")
library(ggplot2)
qplot(x=Weight, data=higg) + facet_wrap(~Label)
qplot(x=Weight, data=higg,binwidth=0.1) + facet_wrap(~Label)
qplot(x=Weight, data=higg,binwidth=0.01) + facet_wrap(~Label) + coord_cartesian(xlim=c(0,2))
qplot(x=Weight, data=higg,binwidth=0.001) + facet_wrap(~Label) + coord_cartesian(xlim=c(0,0.5))
head(result)
result[result <=0.05]
s <- result[result <=0.05]
dim(s)
b <- result[result >0.05]
dim(b)
dim(higg$Label=='s')
higg[higg$Label=='s',]
dim(s)
s <- result[result <=0.3]
length(s)
s <- result[result <=0.35]
length(s)
s <- result[result <=0.4]
length(s)
s <- result[result <=35]
b <- result[result > 0.35]
s <- result[result <= 0.35]
length(b)
length(s)
reals <- higg.test[higg.test$Label=='s',33]
length(reals)
higg.check <- h2o.importFile(localH20, path ="d:\\DataAnalysis_Company\\Project3_Higgs\\test.csv" , key = "higg")
resultTest <- h2o.predict(model,higg.check)
head(resultTest)
s <- resultTest[resultTest <=0.35]
length(s)
b <- resultTest[resultTest > 0.35]
length(b)
file <- data.frame(id=higg.check$EventId, Weight = resultTest)
file <- data.frame(higg.check$EventId, resultTest)
file <- data.frame(higg.check$EventId, resultTest$predict)
higg.check$Weight <- resultTest$predict
names(higg.check)
head(higg.check)
higg <- higg.check[,c(1,32)]
head(higg)
h2o.downloadCSV(higg,filename = "D:\\predictHigg.csv")
h2o.shutdown(localH20)
library(h2o)
localH20 <- h2o.init()
higg.check <- h2o.importFile(localH20, path ="d:\\DataAnalysis_Company\\Project3_Higgs\\test.csv" , key = "higg")
higg.check <- h2o.importFile(localH20, path ="d:\\DataAnalysis_Company\\Project3_Higgs\\trainig.csv" , key = "higg")
higg.check <- h2o.importFile(localH20, path ="d:\\DataAnalysis_Company\\Project3_Higgs\\training.csv" , key = "higg")
h2o.shutdown(localH20)
library(h2o)
localH20 <- h2o.init()
higg.check <- h2o.importFile(localH20, path ="d:\\DataAnalysis_Company\\Project3_Higgs\\test.csv" , key = "higg")
modelWeight <- h2o.loadModel(localH20,"d:\\DataAnalysis_Company\\Project3_Higgs\\Higg_Weight")
modelSB <- h2o.loadModel(localH20,"d:\\DataAnalysis_Company\\Project3_Higgs\\Higg_bs")
resultWeight <- h2o.predict(modelWeight,higg.check)
resultBS <- h2o.predict(modelSB,higg.check)
higg <- higg.check
higg <- higg[,1]
higg$Weight <- resultWeight$predict
higg$Label <- resultBS$predict
head(higg)
h2o.downloadCSV(data = higg, filename = "d:\\DataAnalysis_Company\\Project3_Higgs\\Result_17_8.csv")
higg.check <- h2o.importFile(localH20, path ="d:\\DataAnalysis_Company\\Project3_Higgs\\training.csv" , key = "higg")
higg <- h2o.importFile(localH20, path ="d:\\DataAnalysis_Company\\Project3_Higgs\\training.csv" , key = "higg")
mean(higg[,2])
mean(higg[,2],na.rm = T)
higg <- h2o.importFile(localH20, path ="d:\\DataAnalysis_Company\\Project3_Higgs\\training.csv" , key = "higg")
mean(higg[,2])
mean(higg[,2],na.rm = T)
names(higg)
mean(higg[,32],na.rm = T)
mean(higg[,32])
for(i in 2:32){
higg[is.na(higg[,i]),i] = mean(higg[,i],na.rm = T)
}
is.na(higg[,3])
a <- is.na(higg[,3])
a$DER_mass_transverse_met_lep
setwd("d:\\DataAnalysis_Company\\Project3_Higgs")
higg <- read.csv("training.csv")
for(i in 2:32){
higg[is.na(higg[,i]),i] = mean(higg[,i],na.rm = T)
}
View(higg)
mean(higg[,32])
write.csv(higg,"higg_training.csv")
higg <- h2o.importFile(localH20, path ="d:\\DataAnalysis_Company\\Project3_Higgs\\higg_training.csv" , key = "higg")
head(higg)
library(glmnet)
h2o.shutdown(localH20)
setwd("e:\\CNTT\\Web programming\\Lesson2")
library(slidify)
slidify("index.Rmd")
